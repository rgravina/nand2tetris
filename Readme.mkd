An implementation of a Jack compiler for the Hack platform as described at http://nand2tetris.org.

If you are reading this, please attempt to create the compiler yourself. It's a great learning experience!

Note: This is not nessecarily great C. My main focus was on building the compiler for learning purposes. Please don't copy any techniques here, or use this code for any purpose other than to read and compare with your own solution.

Please do not try and decipher the project requirements from the code or documentation. It's a great book and worth the modest asking price. The authors have also placed the first half of the book online at the website linked above.

TODO
---
- Implement VM to assembly transation
  - Arithmetic, memory access, program flow and function calling commands
    - Arithmetic
      - Seven binary (pop two operands from stack, push one back)
      - Two unanary (pop one operand from stack, push one back)
      - eq, gt, lt return Boolean values.
        - true is -1, false is 0 in the VM
    - Memory access
      - VM operates on eight virtual memory segments
        - argument, local, static, constant, this, that, pointer, temp
      - push segment index - push segment[index] onto the stack
      - pop segment index - pop top stack value and store it in segment[index]
    - Function calling
      - function functionName nLocals - function declaration
      - call functionName nArgs - function call
      - return - return from function
    - Program flow
      - (for next chapter)
        - label symbol - label declaration
        - goto symbol - unconditional branching
        - if-goto symbol - conditional branching
  - Support parsing one .vm file, or a directory of .vm files
  - Memory usage
    - 0 - 15        registers
                    0     SP
                    1     LCL
                    2     ARG
                    3     THIS  (pointer segment)
                    4     THAT  (pointer segment)
                    5-12  temp segment
                    13-15 can be used as general purpose registers
    - 16 - 255      static variables (of all VM function in the VM program)
                    static segment
    - 256 - 2047    the stack
    - 2048 - 16843  the heap (stores objects and arrays)
    - 16384 - 24575 memory mapped I/O
 - vm_parser.c
    - reads VM commands, parses them, translates to assembly code
    - stage 1: static arithmetic commands
      - implement the nine stack arithmetic and logical commands and push x constant
        - constant is a special case push of a decimal constant
          Test with SimpleAdd
        - handle local, argument, this and that segments
        - handle pointer and temp segments, allowing changing the base of this and that segments
        - handle the static segment
          Test with SimpleTest
    - stage 2: memory access commands
      Test with BasicTest (push/pop on virtual memory segments)
      Test with PointerTest (push/pop using pointer, this and that segments)
      Test with StaticTest (push/pop on the static segment)

