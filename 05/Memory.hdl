/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
  IN in[16], load, address[15];
  OUT out[16];

  PARTS:

  /********************
    Note: The first two bits of the address determine the part to use.
    [14]  [13]  selects
       0     0  RAM16
       0     1  RAM16
       1     0  Screen
       1     1  Keyboard
  *********************/
  // check the value of in to see which RAM it should go to
  // if neither of keyboard or screen is used, then use RAM
  And(a=address[14], b=address[13], out=usekbd);
  Not(in=usekbd, out=notusekbd);
  And(a=address[14], b=notusekbd, out=usescreen);
  Or(a=usekbd, b=usescreen, out=useram0);
  Not(in=useram0, out=useram);

  // Be sure not to store values in both RAM and Screen
  And(a=load, b=useram, out=loadram);
  And(a=load, b=usescreen, out=loadscreen);

  RAM16K(in=in, load=loadram, address=address[0..13], out=memout);
  Screen(in=in, load=loadscreen, address=address[1..13], out=screenout);
  Keyboard(out=kbdout);

  Mux16(a=screenout, b=kbdout, sel=usekbd, out=temp);
  Mux16(a=temp, b=memout, sel=useram, out=out);
}
