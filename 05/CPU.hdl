/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
  IN  inM[16],         // M value input  (M = contents of RAM[A])
      instruction[16], // Instruction for execution
      reset;           // Signals whether to re-start the current
                       // program (reset==1) or continue executing
                       // the current program (reset==0).

  OUT outM[16],        // M value output
      writeM,          // Write to M? 
      addressM[15],    // Address in data memory (of M)
      pc[15];          // address of next instruction

  PARTS:
  // instruction decoding

  // instruction type (A or C)
  Or(a=instruction[15], b=false, out=c-instruction);
  Not(in=c-instruction, out=a-instruction);

  // C instruction fields
  Or(a=instruction[12], b=false, out=a-field);
  Or16(a=instruction, b=false, out[6..11]=c-field);
  Or16(a=instruction, b=false, out[3..5]=d-field);
  Or16(a=instruction, b=false, out[0..2]=j-field);

  // Destination breakdown
  Or16(a=instruction, b=false, out[3]=store-in-m);
  Or16(a=instruction, b=false, out[4]=store-in-d);
  Or16(a=instruction, b=false, out[5]=store-in-a);

  // Control code breakdown
  Or16(a=instruction, b=false, out[11]=zx);
  Or16(a=instruction, b=false, out[10]=nx);
  Or16(a=instruction, b=false, out[9]=zy);
  Or16(a=instruction, b=false, out[8]=ny);
  Or16(a=instruction, b=false, out[6]=no);
  Or16(a=instruction, b=false, out[7]=f);

  // Jump code breakdown
  Or16(a=instruction, b=false, out[0]=jump-if-gt-zero);
  Or16(a=instruction, b=false, out[1]=jump-if-eq-zero);
  Or16(a=instruction, b=false, out[2]=jump-if-lt-zero);

  // A Register
  Mux16(a=instruction, b=alu-out, sel=c-instruction, out=a-reg-input);
  Or(a=store-in-a, b=a-instruction, out=load-a);
  ARegister(in=a-reg-input, load=load-a, out=a-register-out);

  // D Register
  DRegister(in=alu-out, load=store-in-d, out=d-register-out);

  // ALU
  Mux16(a=a-register-out, b=inM, sel=a-field, out=m-or-a);
  ALU(x=d-register-out, y=m-or-a, 
      zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no,
      zr=zr, ng=ng,
      out=alu-out);

  // Program Counter

  And(a=zr, b=jump-if-eq-zero, out=should-jump-eq-zero);
  And(a=ng, b=jump-if-lt-zero, out=should-jump-lt-zero);
  Or(a=ng, b=zr, out=or-ng-zr);
  Not(in=or-ng-zr, out=pos);
  And(a=pos, b=jump-if-gt-zero, out=should-jump-gt-zero);
  Or(a=should-jump-lt-zero, b=should-jump-eq-zero, out=should-jump0);
  Or(a=should-jump0, b=should-jump-gt-zero, out=should-jump1);
  And(a=should-jump1, b=c-instruction, out=should-jump);
  // load takes precendence over inc
  PC(in=a-register-out, load=should-jump, inc=true, reset=reset, out[0..14]=pc);

  // Output
  Or16(a=a-register-out, b=false, out[0..14]=addressM);
  Or16(a=alu-out, b=false, out=outM);
  And(a=store-in-m, b=c-instruction, out=writeM);
}
